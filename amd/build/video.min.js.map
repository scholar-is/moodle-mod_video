{"version":3,"file":"video.min.js","sources":["../src/video.js"],"sourcesContent":["import Plyr from 'mod_video/plyr';\nimport Ajax from 'core/ajax';\nimport * as Toast from 'core/toast';\nimport {get_strings as getStrings} from 'core/str';\n\nconst UPDATE_INTERVAL_SECONDS = 10;\n\nexport default class Video {\n\n    constructor(cm, instance, options) {\n        this.cm = cm;\n        this.instance = instance;\n        this.options = options;\n        this.session = null;\n\n        this.elapsedseconds = 0;\n        this.maxTime = options.sessionAggregates.maxtime ?? 0;\n\n        this.init();\n    }\n\n    async init() {\n        this.log(\"video:init:cm\", this.cm);\n        this.log(\"video:init:instance\", this.instance);\n        this.log(\"video:init:options\", this.options);\n\n        const stringKeys = [\n            {\n                key: 'cannotforwardseek',\n                component: 'mod_video'\n            },\n        ];\n        this.strings = await getStrings(stringKeys);\n\n        if (this.options.preventForwardSeeking) {\n            this.options.listeners = {\n                seek: (e) => {\n                    this.log(\"video:seek\", this.player.currentTime, e);\n                    this.log(\"strings\", this.strings);\n                    if (_getTargetTime(this.player, e) > this.maxTime) {\n                        this.log(\"video:preventff\", this.player.currentTime, e);\n                        if (!document.querySelector('.toast-wrapper .toast')) {\n                            Toast.add(this.strings[0]);\n                        }\n                        return false;\n                    }\n                }\n            };\n        }\n\n        this.player = new Plyr(`#player-${this.instance.id}`, this.options);\n\n        this.log(\"video:player\", this.player);\n\n        if (this.options.sessionAggregates.lasttime) {\n            this.log(\"video:resume\", this.options.sessionAggregates.lasttime);\n            this.player.currentTime = parseInt(this.options.sessionAggregates.lasttime);\n        }\n\n        setInterval(() => this.tick(), 1000);\n\n        setInterval(() => this.recordUpdates(), UPDATE_INTERVAL_SECONDS * 1000);\n\n        this.player.on('playing', async () => {\n            if (!this.sessionInitialized) {\n                this.sessionInitialized = true;\n                const response = await this.createSession(this.cm.id);\n                this.session = response.session;\n            }\n        });\n    }\n\n    tick() {\n        if (this.player && this.player.playing) {\n            this.elapsedseconds += this.player.speed;\n\n            if (this.player.currentTime > this.maxTime) {\n                this.maxTime = this.player.currentTime;\n            }\n        }\n    }\n\n    recordUpdates() {\n        if (this.player && this.elapsedseconds > 0) {\n            Ajax.call([{\n                methodname: 'mod_video_record_session_updates',\n                args: {\n                    sessionid: this.session.id,\n                    timeelapsed: this.elapsedseconds,\n                    currenttime: parseInt(this.player.currentTime),\n                    currentpercent: this.player.currentTime / this.player.duration,\n                }\n            }]);\n            this.elapsedseconds = 0;\n        }\n    }\n\n    createSession(cmid) {\n        return Ajax.call([{\n            methodname: 'mod_video_create_session',\n            args: { cmid }\n        }])[0];\n    }\n\n    /**\n     * Wrapper for `console.log` that conditionally logs based on the `debug` setting for this cm.\n     * @param {any} data\n     */\n    log(...data) {\n        if (this.options.debug) {\n            // eslint-disable-next-line no-console\n            console.log(data);\n        }\n    }\n}\n\n/**\n * Get the time user is seeking to.\n * @param {Player} plyr\n * @param {HTMLInputElement} input\n * @returns {number}\n * @private\n */\nfunction _getTargetTime(plyr, input) {\n    if (typeof input === \"object\" && (input.type === \"input\" || input.type === \"change\")) {\n        return input.target.value / input.target.max * plyr.media.duration;\n    } else {\n        return Number(input);\n    }\n}"],"names":["Video","cm","instance","options","session","elapsedseconds","maxTime","sessionAggregates","maxtime","init","log","this","stringKeys","key","component","strings","preventForwardSeeking","listeners","seek","e","_this","player","currentTime","_getTargetTime","document","querySelector","Toast","add","Plyr","id","lasttime","parseInt","setInterval","tick","recordUpdates","UPDATE_INTERVAL_SECONDS","on","sessionInitialized","createSession","response","playing","speed","call","methodname","args","sessionid","timeelapsed","currenttime","currentpercent","duration","cmid","Ajax","debug","data","console","plyr","input","_typeof","type","Number","target","value","max","media"],"mappings":"i3EAOqBA,gCAELC,GAAIC,SAAUC,oLACjBF,GAAKA,QACLC,SAAWA,cACXC,QAAUA,aACVC,QAAU,UAEVC,eAAiB,OACjBC,sCAAUH,QAAQI,kBAAkBC,+DAAW,OAE/CC,6JAGT,kKACSC,IAAI,gBAAiBC,KAAKV,SAC1BS,IAAI,sBAAuBC,KAAKT,eAChCQ,IAAI,qBAAsBC,KAAKR,SAE9BS,WAAa,CACf,CACIC,IAAK,oBACLC,UAAW,gCAGE,oBAAWF,wBAA3BG,uBAEDJ,KAAKR,QAAQa,6BACRb,QAAQc,UAAY,CACrBC,KAAM,SAACC,MACHC,MAAKV,IAAI,aAAcU,MAAKC,OAAOC,YAAaH,GAChDC,MAAKV,IAAI,UAAWU,MAAKL,SACrBQ,eAAeH,MAAKC,OAAQF,GAAKC,MAAKd,eACtCc,MAAKV,IAAI,kBAAmBU,MAAKC,OAAOC,YAAaH,GAChDK,SAASC,cAAc,0BACxBC,MAAMC,IAAIP,MAAKL,QAAQ,KAEpB,UAMlBM,OAAS,IAAIO,gCAAgBjB,KAAKT,SAAS2B,IAAMlB,KAAKR,cAEtDO,IAAI,eAAgBC,KAAKU,QAE1BV,KAAKR,QAAQI,kBAAkBuB,gBAC1BpB,IAAI,eAAgBC,KAAKR,QAAQI,kBAAkBuB,eACnDT,OAAOC,YAAcS,SAASpB,KAAKR,QAAQI,kBAAkBuB,WAGtEE,aAAY,kBAAMZ,MAAKa,SAAQ,KAE/BD,aAAY,kBAAMZ,MAAKc,kBAAiBC,UAEnCd,OAAOe,GAAG,qDAAW,wIACjBhB,MAAKiB,iDACNjB,MAAKiB,oBAAqB,kBACHjB,MAAKkB,cAAclB,MAAKnB,GAAG4B,WAA5CU,uBACNnB,MAAKhB,QAAUmC,SAASnC,oMAKpC,WACQO,KAAKU,QAAUV,KAAKU,OAAOmB,eACtBnC,gBAAkBM,KAAKU,OAAOoB,MAE/B9B,KAAKU,OAAOC,YAAcX,KAAKL,eAC1BA,QAAUK,KAAKU,OAAOC,2CAKvC,WACQX,KAAKU,QAAUV,KAAKN,eAAiB,kBAChCqC,KAAK,CAAC,CACPC,WAAY,mCACZC,KAAM,CACFC,UAAWlC,KAAKP,QAAQyB,GACxBiB,YAAanC,KAAKN,eAClB0C,YAAahB,SAASpB,KAAKU,OAAOC,aAClC0B,eAAgBrC,KAAKU,OAAOC,YAAcX,KAAKU,OAAO4B,kBAGzD5C,eAAiB,gCAI9B,SAAc6C,aACHC,cAAKT,KAAK,CAAC,CACdC,WAAY,2BACZC,KAAM,CAAEM,KAAAA,SACR,sBAOR,cACQvC,KAAKR,QAAQiD,MAAO,+BADrBC,6CAAAA,2BAGCC,QAAQ5C,IAAI2C,iNAYf9B,eAAegC,KAAMC,aACL,WAAjBC,QAAOD,QAAsC,UAAfA,MAAME,MAAmC,WAAfF,MAAME,KAGvDC,OAAOH,OAFPA,MAAMI,OAAOC,MAAQL,MAAMI,OAAOE,IAAMP,KAAKQ,MAAMd"}