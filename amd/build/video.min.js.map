{"version":3,"file":"video.min.js","sources":["../src/video.js"],"sourcesContent":["import Plyr from 'mod_video/plyr';\nimport Ajax from 'core/ajax';\nimport * as Toast from 'core/toast';\nimport {get_strings as getStrings} from 'core/str';\n\nconst UPDATE_INTERVAL_SECONDS = 10;\n\nexport default class Video {\n\n    constructor(cm, instance, options) {\n        this.cm = cm;\n        this.instance = instance;\n        this.options = {\n            forceDuration: true,\n            ...options,\n        };\n        this.session = null;\n\n        this.elapsedseconds = 0;\n        this.maxTime = options.sessionAggregates.maxtime ?? 0;\n\n        void this.init();\n    }\n\n    async init() {\n        this.log(\"video:init:cm\", this.cm);\n        this.log(\"video:init:instance\", this.instance);\n        this.log(\"video:init:options\", this.options);\n\n        const stringKeys = [\n            {\n                key: 'cannotforwardseek',\n                component: 'mod_video'\n            },\n        ];\n        this.strings = await getStrings(stringKeys);\n\n        if (this.options.preventForwardSeeking) {\n            this.options.listeners = {\n                seek: (e) => {\n                    this.log(\"video:seek\", this.player.currentTime, e);\n                    this.log(\"strings\", this.strings);\n                    if (_getTargetTime(this.player, e) > this.maxTime) {\n                        this.log(\"video:preventff\", this.player.currentTime, e);\n                        if (!document.querySelector('.toast-wrapper .toast')) {\n                            Toast.add(this.strings[0]);\n                        }\n                        return false;\n                    }\n                },\n            };\n        }\n\n        this.player = new Plyr(`#player-${this.instance.id}`, this.options);\n\n        window.player = this.player;\n\n        this.player.on('playing', async (event) => {\n            this.log(\"player:playing\", event);\n            if (!this.sessionInitialized) {\n                this.sessionInitialized = true;\n                const response = await this.createSession(this.cm.id);\n                this.session = response.session;\n            }\n        });\n\n        this.player.on('ready', (event) => {\n            this.log(\"player:ready\", event);\n\n            if (this.instance.resume === \"1\" && this.options.sessionAggregates.lasttime) {\n                const resumeTime = parseInt(this.options.sessionAggregates.lasttime);\n                this.log(\"video:resume\", resumeTime);\n                // Note: There's a bug when setting the current time for videos:\n                // the progress bar will not update until the video is played.\n                if (event.detail.plyr.embed.setCurrentTime) {\n                    event.detail.plyr.embed.setCurrentTime(resumeTime);\n                } else {\n                    // Vimeo.\n                    event.detail.plyr.currentTime = resumeTime;\n                }\n            }\n        });\n\n        this.player.on('pause', () => {\n            this.recordUpdates();\n        });\n        this.player.on('ended', () => {\n            this.recordUpdates();\n        });\n\n        this.player.on('error', (event) => {\n            console.error(event);\n        });\n\n        this.log(\"video:player\", this.player);\n\n        setInterval(() => this.tick(), 1000);\n\n        setInterval(() => this.recordUpdates(), UPDATE_INTERVAL_SECONDS * 1000);\n    }\n\n    tick() {\n        if (this.player && this.player.playing) {\n            this.elapsedseconds += this.player.speed;\n\n            if (this.player.currentTime > this.maxTime) {\n                this.maxTime = this.player.currentTime;\n            }\n        }\n    }\n\n    recordUpdates() {\n        if (this.player && this.elapsedseconds > 0 && this.sessionInitialized) {\n            Ajax.call([{\n                methodname: 'mod_video_record_session_updates',\n                args: {\n                    sessionid: this.session.id,\n                    timeelapsed: this.elapsedseconds,\n                    currenttime: parseInt(this.player.currentTime),\n                    currentpercent: this.player.currentTime / this.player.duration,\n                }\n            }]);\n            this.elapsedseconds = 0;\n        }\n    }\n\n    createSession(cmid) {\n        return Ajax.call([{\n            methodname: 'mod_video_create_session',\n            args: { cmid }\n        }])[0];\n    }\n\n    /**\n     * Wrapper for `console.log` that conditionally logs based on the `debug` setting for this cm.\n     * @param {any} data\n     */\n    log(...data) {\n        if (this.options.debug) {\n            // eslint-disable-next-line no-console\n            console.log(data);\n        }\n    }\n}\n\n/**\n * Get the time user is seeking to.\n * @param {Player} plyr\n * @param {HTMLInputElement} input\n * @returns {number}\n * @private\n */\nfunction _getTargetTime(plyr, input) {\n    if (typeof input === \"object\" && (input.type === \"input\" || input.type === \"change\")) {\n        return input.target.value / input.target.max * plyr.media.duration;\n    } else {\n        return Number(input);\n    }\n}"],"names":["constructor","cm","instance","options","forceDuration","session","elapsedseconds","maxTime","sessionAggregates","maxtime","this","init","log","strings","key","component","preventForwardSeeking","listeners","seek","e","player","currentTime","plyr","input","type","Number","target","value","max","media","duration","document","querySelector","Toast","add","Plyr","id","window","on","async","event","sessionInitialized","response","createSession","resume","lasttime","resumeTime","parseInt","detail","embed","setCurrentTime","recordUpdates","console","error","setInterval","tick","UPDATE_INTERVAL_SECONDS","playing","speed","call","methodname","args","sessionid","timeelapsed","currenttime","currentpercent","cmid","Ajax","debug","data"],"mappings":"0zCASIA,YAAYC,GAAIC,SAAUC,wCACjBF,GAAKA,QACLC,SAAWA,cACXC,QAAU,CACXC,eAAe,KACZD,cAEFE,QAAU,UAEVC,eAAiB,OACjBC,sCAAUJ,QAAQK,kBAAkBC,+DAAW,EAE/CC,KAAKC,yBAILC,IAAI,gBAAiBF,KAAKT,SAC1BW,IAAI,sBAAuBF,KAAKR,eAChCU,IAAI,qBAAsBF,KAAKP,cAQ/BU,cAAgB,oBANF,CACf,CACIC,IAAK,oBACLC,UAAW,eAKfL,KAAKP,QAAQa,6BACRb,QAAQc,UAAY,CACrBC,KAAOC,YACEP,IAAI,aAAcF,KAAKU,OAAOC,YAAaF,QAC3CP,IAAI,UAAWF,KAAKG,SA+GrBS,KA9GeZ,KAAKU,QA+GnB,iBADKG,MA9GsBJ,IA+GC,UAAfI,MAAMC,MAAmC,WAAfD,MAAMC,KAGvDC,OAAOF,OAFPA,MAAMG,OAAOC,MAAQJ,MAAMG,OAAOE,IAAMN,KAAKO,MAAMC,UAhHTpB,KAAKH,oBACjCK,IAAI,kBAAmBF,KAAKU,OAAOC,YAAaF,GAChDY,SAASC,cAAc,0BACxBC,MAAMC,IAAIxB,KAAKG,QAAQ,KAEpB,MAyGPS,KAAMC,cAnGjBH,OAAS,IAAIe,gCAAgBzB,KAAKR,SAASkC,IAAM1B,KAAKP,SAE3DkC,OAAOjB,OAASV,KAAKU,YAEhBA,OAAOkB,GAAG,WAAWC,MAAAA,gBACjB3B,IAAI,iBAAkB4B,QACtB9B,KAAK+B,mBAAoB,MACrBA,oBAAqB,QACpBC,eAAiBhC,KAAKiC,cAAcjC,KAAKT,GAAGmC,SAC7C/B,QAAUqC,SAASrC,iBAI3Be,OAAOkB,GAAG,SAAUE,gBAChB5B,IAAI,eAAgB4B,OAEI,MAAzB9B,KAAKR,SAAS0C,QAAkBlC,KAAKP,QAAQK,kBAAkBqC,SAAU,OACnEC,WAAaC,SAASrC,KAAKP,QAAQK,kBAAkBqC,eACtDjC,IAAI,eAAgBkC,YAGrBN,MAAMQ,OAAO1B,KAAK2B,MAAMC,eACxBV,MAAMQ,OAAO1B,KAAK2B,MAAMC,eAAeJ,YAGvCN,MAAMQ,OAAO1B,KAAKD,YAAcyB,oBAKvC1B,OAAOkB,GAAG,SAAS,UACfa,wBAEJ/B,OAAOkB,GAAG,SAAS,UACfa,wBAGJ/B,OAAOkB,GAAG,SAAUE,QACrBY,QAAQC,MAAMb,eAGb5B,IAAI,eAAgBF,KAAKU,QAE9BkC,aAAY,IAAM5C,KAAK6C,QAAQ,KAE/BD,aAAY,IAAM5C,KAAKyC,iBAAiBK,KAG5CD,OACQ7C,KAAKU,QAAUV,KAAKU,OAAOqC,eACtBnD,gBAAkBI,KAAKU,OAAOsC,MAE/BhD,KAAKU,OAAOC,YAAcX,KAAKH,eAC1BA,QAAUG,KAAKU,OAAOC,cAKvC8B,gBACQzC,KAAKU,QAAUV,KAAKJ,eAAiB,GAAKI,KAAK+B,mCAC1CkB,KAAK,CAAC,CACPC,WAAY,mCACZC,KAAM,CACFC,UAAWpD,KAAKL,QAAQ+B,GACxB2B,YAAarD,KAAKJ,eAClB0D,YAAajB,SAASrC,KAAKU,OAAOC,aAClC4C,eAAgBvD,KAAKU,OAAOC,YAAcX,KAAKU,OAAOU,kBAGzDxB,eAAiB,GAI9BqC,cAAcuB,aACHC,cAAKR,KAAK,CAAC,CACdC,WAAY,2BACZC,KAAM,CAAEK,KAAAA,SACR,GAORtD,SACQF,KAAKP,QAAQiE,MAAO,+BADrBC,6CAAAA,2BAGCjB,QAAQxC,IAAIyD"}