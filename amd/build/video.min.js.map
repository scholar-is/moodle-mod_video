{"version":3,"file":"video.min.js","sources":["../src/video.js"],"sourcesContent":["import Plyr from 'mod_video/plyr';\nimport Ajax from 'core/ajax';\nimport * as Toast from 'core/toast';\nimport {get_strings as getStrings} from 'core/str';\n\nconst UPDATE_INTERVAL_SECONDS = 10;\n\nexport default class Video {\n\n    constructor(cm, instance, options) {\n        this.cm = cm;\n        this.instance = instance;\n        this.options = {\n            forceDuration: true,\n            ...options,\n        };\n        this.session = null;\n\n        this.elapsedseconds = 0;\n        this.maxTime = options.sessionAggregates.maxtime ?? 0;\n        this.root = document.getElementById(`video-${this.instance.id}`);\n\n        void this.init();\n    }\n\n    async init() {\n        this.log(\"video:init:cm\", this.cm);\n        this.log(\"video:init:instance\", this.instance);\n        this.log(\"video:init:options\", this.options);\n\n        const stringKeys = [\n            {\n                key: 'cannotforwardseek',\n                component: 'mod_video'\n            },\n        ];\n        this.strings = await getStrings(stringKeys);\n\n        if (this.options.preventForwardSeeking) {\n            this.options.listeners = {\n                seek: (e) => {\n                    this.log(\"video:seek\", this.player.currentTime, e);\n                    this.log(\"strings\", this.strings);\n                    if (_getTargetTime(this.player, e) > this.maxTime) {\n                        this.log(\"video:preventff\", this.player.currentTime, e);\n                        if (!document.querySelector('.toast-wrapper .toast')) {\n                            Toast.add(this.strings[0]);\n                        }\n                        return false;\n                    }\n                },\n            };\n        }\n\n        this.player = new Plyr(`#player-${this.instance.id}`, this.options);\n\n        window.player = this.player;\n\n        this.player.on('playing', async (event) => {\n            this.log(\"player:playing\", event);\n            if (!this.sessionInitialized) {\n                this.sessionInitialized = true;\n                const response = await this.createSession(this.cm.id);\n                this.session = response.session;\n            }\n        });\n\n        this.player.on('ready', (event) => {\n            this.log(\"player:ready\", event);\n\n            if (this.instance.resume === \"1\" && this.options.sessionAggregates.lasttime) {\n                const resumeTime = parseInt(this.options.sessionAggregates.lasttime);\n                this.log(\"video:resume\", resumeTime);\n                // Note: There's a bug when setting the current time for videos:\n                // the progress bar will not update until the video is played.\n                if (event.detail.plyr.embed.setCurrentTime) {\n                    event.detail.plyr.embed.setCurrentTime(resumeTime);\n                } else {\n                    // Vimeo.\n                    event.detail.plyr.currentTime = resumeTime;\n                }\n            }\n\n            this.root.classList.add('ready');\n        });\n\n        this.player.on('pause', () => {\n            this.recordUpdates();\n        });\n        this.player.on('ended', () => {\n            this.recordUpdates();\n        });\n\n        this.log(\"video:player\", this.player);\n\n        setInterval(() => this.tick(), 1000);\n\n        setInterval(() => this.recordUpdates(), UPDATE_INTERVAL_SECONDS * 1000);\n    }\n\n    tick() {\n        if (this.player && this.player.playing) {\n            this.elapsedseconds += this.player.speed;\n\n            if (this.player.currentTime > this.maxTime) {\n                this.maxTime = this.player.currentTime;\n            }\n        }\n    }\n\n    recordUpdates() {\n        if (this.player && this.elapsedseconds > 0 && this.sessionInitialized) {\n            Ajax.call([{\n                methodname: 'mod_video_record_session_updates',\n                args: {\n                    sessionid: this.session.id,\n                    timeelapsed: this.elapsedseconds,\n                    currenttime: parseInt(this.player.currentTime),\n                    currentpercent: this.player.currentTime / this.player.duration,\n                }\n            }]);\n            this.elapsedseconds = 0;\n        }\n    }\n\n    createSession(cmid) {\n        return Ajax.call([{\n            methodname: 'mod_video_create_session',\n            args: { cmid }\n        }])[0];\n    }\n\n    /**\n     * Wrapper for `console.log` that conditionally logs based on the `debug` setting for this cm.\n     * @param {any} data\n     */\n    log(...data) {\n        if (this.options.debug) {\n            // eslint-disable-next-line no-console\n            console.log(data);\n        }\n    }\n}\n\n/**\n * Get the time user is seeking to.\n * @param {Player} plyr\n * @param {HTMLInputElement} input\n * @returns {number}\n * @private\n */\nfunction _getTargetTime(plyr, input) {\n    if (typeof input === \"object\" && (input.type === \"input\" || input.type === \"change\")) {\n        return input.target.value / input.target.max * plyr.media.duration;\n    } else {\n        return Number(input);\n    }\n}"],"names":["constructor","cm","instance","options","forceDuration","session","elapsedseconds","maxTime","sessionAggregates","maxtime","root","document","getElementById","this","id","init","log","strings","key","component","preventForwardSeeking","listeners","seek","e","player","currentTime","plyr","input","type","Number","target","value","max","media","duration","querySelector","Toast","add","Plyr","window","on","async","event","sessionInitialized","response","createSession","resume","lasttime","resumeTime","parseInt","detail","embed","setCurrentTime","classList","recordUpdates","setInterval","tick","UPDATE_INTERVAL_SECONDS","playing","speed","call","methodname","args","sessionid","timeelapsed","currenttime","currentpercent","cmid","Ajax","debug","data","console"],"mappings":"0zCASIA,YAAYC,GAAIC,SAAUC,wCACjBF,GAAKA,QACLC,SAAWA,cACXC,QAAU,CACXC,eAAe,KACZD,cAEFE,QAAU,UAEVC,eAAiB,OACjBC,sCAAUJ,QAAQK,kBAAkBC,+DAAW,OAC/CC,KAAOC,SAASC,+BAAwBC,KAAKX,SAASY,KAEtDD,KAAKE,yBAILC,IAAI,gBAAiBH,KAAKZ,SAC1Be,IAAI,sBAAuBH,KAAKX,eAChCc,IAAI,qBAAsBH,KAAKV,cAQ/Bc,cAAgB,oBANF,CACf,CACIC,IAAK,oBACLC,UAAW,eAKfN,KAAKV,QAAQiB,6BACRjB,QAAQkB,UAAY,CACrBC,KAAOC,YACEP,IAAI,aAAcH,KAAKW,OAAOC,YAAaF,QAC3CP,IAAI,UAAWH,KAAKI,SA6GrBS,KA5Geb,KAAKW,QA6GnB,iBADKG,MA5GsBJ,IA6GC,UAAfI,MAAMC,MAAmC,WAAfD,MAAMC,KAGvDC,OAAOF,OAFPA,MAAMG,OAAOC,MAAQJ,MAAMG,OAAOE,IAAMN,KAAKO,MAAMC,UA9GTrB,KAAKN,oBACjCS,IAAI,kBAAmBH,KAAKW,OAAOC,YAAaF,GAChDZ,SAASwB,cAAc,0BACxBC,MAAMC,IAAIxB,KAAKI,QAAQ,KAEpB,MAuGPS,KAAMC,cAjGjBH,OAAS,IAAIc,gCAAgBzB,KAAKX,SAASY,IAAMD,KAAKV,SAE3DoC,OAAOf,OAASX,KAAKW,YAEhBA,OAAOgB,GAAG,WAAWC,MAAAA,gBACjBzB,IAAI,iBAAkB0B,QACtB7B,KAAK8B,mBAAoB,MACrBA,oBAAqB,QACpBC,eAAiB/B,KAAKgC,cAAchC,KAAKZ,GAAGa,SAC7CT,QAAUuC,SAASvC,iBAI3BmB,OAAOgB,GAAG,SAAUE,gBAChB1B,IAAI,eAAgB0B,OAEI,MAAzB7B,KAAKX,SAAS4C,QAAkBjC,KAAKV,QAAQK,kBAAkBuC,SAAU,OACnEC,WAAaC,SAASpC,KAAKV,QAAQK,kBAAkBuC,eACtD/B,IAAI,eAAgBgC,YAGrBN,MAAMQ,OAAOxB,KAAKyB,MAAMC,eACxBV,MAAMQ,OAAOxB,KAAKyB,MAAMC,eAAeJ,YAGvCN,MAAMQ,OAAOxB,KAAKD,YAAcuB,gBAInCtC,KAAK2C,UAAUhB,IAAI,iBAGvBb,OAAOgB,GAAG,SAAS,UACfc,wBAEJ9B,OAAOgB,GAAG,SAAS,UACfc,wBAGJtC,IAAI,eAAgBH,KAAKW,QAE9B+B,aAAY,IAAM1C,KAAK2C,QAAQ,KAE/BD,aAAY,IAAM1C,KAAKyC,iBAAiBG,KAG5CD,OACQ3C,KAAKW,QAAUX,KAAKW,OAAOkC,eACtBpD,gBAAkBO,KAAKW,OAAOmC,MAE/B9C,KAAKW,OAAOC,YAAcZ,KAAKN,eAC1BA,QAAUM,KAAKW,OAAOC,cAKvC6B,gBACQzC,KAAKW,QAAUX,KAAKP,eAAiB,GAAKO,KAAK8B,mCAC1CiB,KAAK,CAAC,CACPC,WAAY,mCACZC,KAAM,CACFC,UAAWlD,KAAKR,QAAQS,GACxBkD,YAAanD,KAAKP,eAClB2D,YAAahB,SAASpC,KAAKW,OAAOC,aAClCyC,eAAgBrD,KAAKW,OAAOC,YAAcZ,KAAKW,OAAOU,kBAGzD5B,eAAiB,GAI9BuC,cAAcsB,aACHC,cAAKR,KAAK,CAAC,CACdC,WAAY,2BACZC,KAAM,CAAEK,KAAAA,SACR,GAORnD,SACQH,KAAKV,QAAQkE,MAAO,+BADrBC,6CAAAA,2BAGCC,QAAQvD,IAAIsD"}