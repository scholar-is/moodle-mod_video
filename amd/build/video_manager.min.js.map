{"version":3,"file":"video_manager.min.js","sources":["../src/video_manager.js"],"sourcesContent":["import Ajax from 'core/ajax';\nimport {exception as displayException} from 'core/notification';\nimport Templates from 'core/templates';\n\nexport default class VideoManager {\n\n    constructor(uniqueId, options) {\n        this.uniqueId = uniqueId;\n        this.options = options;\n\n        this.root = document.getElementById('video-manager-' + this.uniqueId);\n        this.resultContainer = document.querySelector(`#video-manager-${this.uniqueId} .card-columns`);\n        this.searchInput = document.querySelector(`#video-manager-${this.uniqueId} input[name=search-videos-value]`);\n        this.searchButton = document.querySelector(`#video-manager-${this.uniqueId} .search-videos-button`);\n        this.loadingIconContainer = document.querySelector(`#video-manager-${this.uniqueId} .loading-icon-container`);\n\n        this.videoResults = {\n            total: 0,\n            videos: [],\n        };\n\n        void this.init();\n    }\n\n    async init() {\n        this.log(\"video_manager:init:uniqueid\", this.uniqueId);\n        this.log(\"video_manager:init:options\", this.options);\n\n        this.searchButton.addEventListener('click', async () => {\n            await this.query();\n            await this.refreshResults();\n        });\n\n        this.searchInput.addEventListener('keypress', async (e) => {\n            if (e.key === 'Enter') {\n                e.preventDefault();\n                await this.query();\n                await this.refreshResults();\n            }\n        });\n\n        await this.query();\n        await this.refreshResults();\n    }\n\n    async query() {\n        this.log(\"video_manager:query\", this.searchInput.value);\n        this.setLoading(true);\n        this.videoResults = (await this.queryVideos(this.searchInput.value)).results;\n    }\n\n    async refreshResults() {\n        const renderedResults = await Promise.all(this.videoResults.videos.map(async (videoResult) => {\n            const { html } = await Templates.renderForPromise('mod_video/video_manager_result', videoResult);\n            return html;\n        }));\n\n        this.resultContainer.innerHTML = renderedResults.join('');\n\n        const queryString = `#video-manager-${this.uniqueId} .select-video-button`;\n        const buttons = document.querySelectorAll(`#video-manager-${this.uniqueId} .select-video-button`);\n\n        console.log(queryString, buttons);\n\n        buttons.forEach((button) => {\n            console.log(button);\n            button.addEventListener('click', (e) => {\n                const selectedVideoResult = this.videoResults.videos.find((r) => r.videoid === e.target.dataset.videoid);\n                if (this.options.onVideoSelect) {\n                    this.options.onVideoSelect(selectedVideoResult);\n                }\n            });\n        });\n\n        this.setLoading(false);\n    }\n\n    setLoading(loading) {\n        if (loading) {\n            this.loadingIconContainer.classList.remove('hidden');\n        } else {\n            this.loadingIconContainer.classList.add('hidden');\n        }\n    }\n\n    queryVideos(query) {\n        return Ajax.call([{\n            methodname: 'mod_video_query_videos',\n            args: {\n                query\n            }\n        }])[0];\n    }\n\n    /**\n     * Wrapper for `console.log` that conditionally logs based on the `debug` setting for this cm.\n     * @param {any} data\n     */\n    log(...data) {\n        if (this.options.debug) {\n            // eslint-disable-next-line no-console\n            console.log(data);\n        }\n    }\n}\n"],"names":["constructor","uniqueId","options","root","document","getElementById","this","resultContainer","querySelector","searchInput","searchButton","loadingIconContainer","videoResults","total","videos","init","log","addEventListener","async","query","refreshResults","e","key","preventDefault","value","setLoading","queryVideos","results","renderedResults","Promise","all","map","html","Templates","renderForPromise","videoResult","innerHTML","join","queryString","buttons","querySelectorAll","console","forEach","button","selectedVideoResult","find","r","videoid","target","dataset","onVideoSelect","loading","classList","remove","add","Ajax","call","methodname","args","debug","data"],"mappings":"maAMIA,YAAYC,SAAUC,cACbD,SAAWA,cACXC,QAAUA,aAEVC,KAAOC,SAASC,eAAe,iBAAmBC,KAAKL,eACvDM,gBAAkBH,SAASI,uCAAgCF,KAAKL,iCAChEQ,YAAcL,SAASI,uCAAgCF,KAAKL,mDAC5DS,aAAeN,SAASI,uCAAgCF,KAAKL,yCAC7DU,qBAAuBP,SAASI,uCAAgCF,KAAKL,2CAErEW,aAAe,CAChBC,MAAO,EACPC,OAAQ,IAGPR,KAAKS,yBAILC,IAAI,8BAA+BV,KAAKL,eACxCe,IAAI,6BAA8BV,KAAKJ,cAEvCQ,aAAaO,iBAAiB,SAASC,gBAClCZ,KAAKa,cACLb,KAAKc,yBAGVX,YAAYQ,iBAAiB,YAAYC,MAAAA,IAC5B,UAAVG,EAAEC,MACFD,EAAEE,uBACIjB,KAAKa,cACLb,KAAKc,2BAIbd,KAAKa,cACLb,KAAKc,oCAINJ,IAAI,sBAAuBV,KAAKG,YAAYe,YAC5CC,YAAW,QACXb,oBAAsBN,KAAKoB,YAAYpB,KAAKG,YAAYe,QAAQG,qCAI/DC,sBAAwBC,QAAQC,IAAIxB,KAAKM,aAAaE,OAAOiB,KAAIb,MAAAA,oBAC7Dc,KAAEA,YAAeC,mBAAUC,iBAAiB,iCAAkCC,oBAC7EH,cAGNzB,gBAAgB6B,UAAYR,gBAAgBS,KAAK,UAEhDC,qCAAgChC,KAAKL,kCACrCsC,QAAUnC,SAASoC,0CAAmClC,KAAKL,mCAEjEwC,QAAQzB,IAAIsB,YAAaC,SAEzBA,QAAQG,SAASC,SACbF,QAAQzB,IAAI2B,QACZA,OAAO1B,iBAAiB,SAAUI,UACxBuB,oBAAsBtC,KAAKM,aAAaE,OAAO+B,MAAMC,GAAMA,EAAEC,UAAY1B,EAAE2B,OAAOC,QAAQF,UAC5FzC,KAAKJ,QAAQgD,oBACRhD,QAAQgD,cAAcN,gCAKlCnB,YAAW,GAGpBA,WAAW0B,SACHA,aACKxC,qBAAqByC,UAAUC,OAAO,eAEtC1C,qBAAqByC,UAAUE,IAAI,UAIhD5B,YAAYP,cACDoC,cAAKC,KAAK,CAAC,CACdC,WAAY,yBACZC,KAAM,CACFvC,MAAAA,UAEJ,GAORH,SACQV,KAAKJ,QAAQyD,MAAO,+BADrBC,6CAAAA,2BAGCnB,QAAQzB,IAAI4C"}