{"version":3,"file":"video_manager.min.js","sources":["../src/video_manager.js"],"sourcesContent":["import Ajax from 'core/ajax';\nimport Notification from 'core/notification';\nimport Templates from 'core/templates';\n\nexport default class VideoManager {\n\n    constructor(uniqueId, videoSourceType, options) {\n        this.uniqueId = uniqueId;\n        this.videoSourceType = videoSourceType;\n        this.options = options;\n\n        this.root = document.getElementById('video-manager-' + this.uniqueId);\n        this.resultContainer = document.querySelector(`#video-manager-${this.uniqueId} .video-results-container`);\n        this.searchInput = document.querySelector(`#video-manager-${this.uniqueId} input[name=search-videos-value]`);\n        this.searchButton = document.querySelector(`#video-manager-${this.uniqueId} .search-videos-button`);\n        this.loadingIconContainer = document.querySelector(`#video-manager-${this.uniqueId} .loading-icon-container`);\n\n        this.videoResults = {\n            total: 0,\n            videos: [],\n        };\n\n        void this.init();\n    }\n\n    async init() {\n        this.log(\"video_manager:init:uniqueid\", this.uniqueId);\n        this.log(\"video_manager:init:options\", this.options);\n\n        this.searchButton.addEventListener('click', async() => {\n            await this.query();\n            await this.refreshResults();\n        });\n\n        this.searchInput.addEventListener('keypress', async(e) => {\n            if (e.key === 'Enter') {\n                e.preventDefault();\n                await this.query();\n                await this.refreshResults();\n            }\n        });\n\n        await this.query();\n        await this.refreshResults();\n    }\n\n    async query() {\n        this.log(\"video_manager:query\", this.searchInput.value);\n        this.setLoading(true);\n        try {\n            this.videoResults = (await this.queryVideos(this.searchInput.value)).results;\n        } catch (e) {\n            await Notification.exception(e);\n        }\n    }\n\n    async refreshResults() {\n        const renderedResults = await Promise.all(this.videoResults.videos.map(async(videoResult) => {\n            const {html} = await Templates.renderForPromise('mod_video/video_manager_result', videoResult);\n            return html;\n        }));\n\n        this.resultContainer.innerHTML = renderedResults.join('');\n\n        const buttons = document.querySelectorAll(`#video-manager-${this.uniqueId} .select-video-button`);\n\n        buttons.forEach((button) => {\n            button.addEventListener('click', (e) => {\n                const selectedVideoResult = this.videoResults.videos.find((r) => r.videoid === e.target.dataset.videoid);\n                if (this.options.onVideoSelect) {\n                    this.options.onVideoSelect(selectedVideoResult);\n                }\n            });\n        });\n\n        this.setLoading(false);\n    }\n\n    setLoading(loading) {\n        if (loading) {\n            this.loadingIconContainer.classList.remove('hidden');\n        } else {\n            this.loadingIconContainer.classList.add('hidden');\n        }\n    }\n\n    queryVideos(query) {\n        return Ajax.call([{\n            methodname: 'mod_video_query_videos',\n            args: {\n                query,\n                videosourcetype: this.videoSourceType,\n            }\n        }])[0];\n    }\n\n    /**\n     * Wrapper for `console.log` that conditionally logs based on the `debug` setting for this cm.\n     * @param {any} data\n     */\n    log(...data) {\n        if (this.options.debug) {\n            // eslint-disable-next-line no-console\n            console.log(data);\n        }\n    }\n}\n"],"names":["constructor","uniqueId","videoSourceType","options","root","document","getElementById","this","resultContainer","querySelector","searchInput","searchButton","loadingIconContainer","videoResults","total","videos","init","log","addEventListener","async","query","refreshResults","e","key","preventDefault","value","setLoading","queryVideos","results","Notification","exception","renderedResults","Promise","all","map","html","Templates","renderForPromise","videoResult","innerHTML","join","querySelectorAll","forEach","button","selectedVideoResult","find","r","videoid","target","dataset","onVideoSelect","loading","classList","remove","add","Ajax","call","methodname","args","videosourcetype","debug","data","console"],"mappings":"udAMIA,YAAYC,SAAUC,gBAAiBC,cAC9BF,SAAWA,cACXC,gBAAkBA,qBAClBC,QAAUA,aAEVC,KAAOC,SAASC,eAAe,iBAAmBC,KAAKN,eACvDO,gBAAkBH,SAASI,uCAAgCF,KAAKN,4CAChES,YAAcL,SAASI,uCAAgCF,KAAKN,mDAC5DU,aAAeN,SAASI,uCAAgCF,KAAKN,yCAC7DW,qBAAuBP,SAASI,uCAAgCF,KAAKN,2CAErEY,aAAe,CAChBC,MAAO,EACPC,OAAQ,IAGPR,KAAKS,yBAILC,IAAI,8BAA+BV,KAAKN,eACxCgB,IAAI,6BAA8BV,KAAKJ,cAEvCQ,aAAaO,iBAAiB,SAASC,gBAClCZ,KAAKa,cACLb,KAAKc,yBAGVX,YAAYQ,iBAAiB,YAAYC,MAAAA,IAC5B,UAAVG,EAAEC,MACFD,EAAEE,uBACIjB,KAAKa,cACLb,KAAKc,2BAIbd,KAAKa,cACLb,KAAKc,oCAINJ,IAAI,sBAAuBV,KAAKG,YAAYe,YAC5CC,YAAW,YAEPb,oBAAsBN,KAAKoB,YAAYpB,KAAKG,YAAYe,QAAQG,QACvE,MAAON,SACCO,sBAAaC,UAAUR,iCAK3BS,sBAAwBC,QAAQC,IAAI1B,KAAKM,aAAaE,OAAOmB,KAAIf,MAAAA,oBAC7DgB,KAACA,YAAcC,mBAAUC,iBAAiB,iCAAkCC,oBAC3EH,cAGN3B,gBAAgB+B,UAAYR,gBAAgBS,KAAK,IAEtCnC,SAASoC,0CAAmClC,KAAKN,mCAEzDyC,SAASC,SACbA,OAAOzB,iBAAiB,SAAUI,UACxBsB,oBAAsBrC,KAAKM,aAAaE,OAAO8B,MAAMC,GAAMA,EAAEC,UAAYzB,EAAE0B,OAAOC,QAAQF,UAC5FxC,KAAKJ,QAAQ+C,oBACR/C,QAAQ+C,cAAcN,gCAKlClB,YAAW,GAGpBA,WAAWyB,SACHA,aACKvC,qBAAqBwC,UAAUC,OAAO,eAEtCzC,qBAAqBwC,UAAUE,IAAI,UAIhD3B,YAAYP,cACDmC,cAAKC,KAAK,CAAC,CACdC,WAAY,yBACZC,KAAM,CACFtC,MAAAA,MACAuC,gBAAiBpD,KAAKL,oBAE1B,GAORe,SACQV,KAAKJ,QAAQyD,MAAO,+BADrBC,6CAAAA,2BAGCC,QAAQ7C,IAAI4C"}